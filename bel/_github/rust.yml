name: Rust

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
      - name: Format
        run: cargo fmt --all -- --check
      - name: Build minimal
        run: cargo build --verbose --no-default-features
      - name: Build with default features
        run: cargo build --verbose
      - name: Build with all features
        run: cargo build --verbose --all-features
      - name: Clippy
        run: cargo clippy --all-features --all-targets -- -D warnings
      - name: Run tests
        run: |
          cargo test --verbose
          cargo test --verbose --features json
          cargo test --verbose --features regex
          cargo test --verbose --features chrono
  fuzz:
    name: Fuzz
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install nightly toolchain
        run: |
          rustup toolchain install nightly
          rustup default nightly
      - uses: Swatinem/rust-cache@v2
        with:
          key: "nightly"
      - name: Install cargo-fuzz
        run: cargo install cargo-fuzz
      - name: Run fuzz tests
        run: |
          cd fuzz
          cargo fuzz run value_binop -- -max_total_time=60
  examples:
    name: Run Examples
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
      - name: Run example-simple
        run: cargo run --bin example-simple --manifest-path example/Cargo.toml
      - name: Run example-variables
        run: cargo run --bin example-variables --manifest-path example/Cargo.toml
      - name: Run example-functions
        run: cargo run --bin example-functions --manifest-path example/Cargo.toml --features chrono
      - name: Run example-threads
        run: cargo run --bin example-threads --manifest-path example/Cargo.toml
      - name: Run example-serde
        run: cargo run --bin example-serde --manifest-path example/Cargo.toml
      - name: Run example-json
        run: cargo run --bin example-json --manifest-path example/Cargo.toml --features json
      - name: Run example-anyhow
        run: cargo run --bin example-anyhow --manifest-path example/Cargo.toml --features anyhow
        # Build, don't run since it starts an HTTP server
      - name: Run example-axum
        run: cargo build --bin example-axum --manifest-path example/Cargo.toml --features axum
