[workspace]
resolver = "2"

members = [
    "bel",
    "bel/benchmarks",
    "bel/fuzz",
    "bel/examples",
    "countries",
    "crypto",
    "docker",
    "html_escape",
    "net",
    "strings",
    "uuid",

    "acme",
    "anyerr",
    "async-trait",
    "base32",
    "base64",
    "cfg-if",
    "constant_time_eq",
    "crc32fast",
    "cron",
    "embed",
    "embed/embed_utils",
    "embed/embed_impl",
    "form_urlencoded",
    "getopts",
    "hex",
    "hostname",
    "httpdate",
    "ipnetwork",
    "itoa",
    "mail_builder",
    "maxminddb",
    "memmem",
    "mime_guess",
    "num_cpus",
    "percent_encoding",
    "pin_project_lite",
    "postmark",
    "ryu",
    "scheduler",
    "serde_urlencoded",
    "serde_yaml",
    "thiserror",
    "thiserror/impl",
    "tld",
    "unsafe_libyaml",
]

[workspace.dependencies]
blake3 = { version = "1", features = ["neon", "zeroize"] }
bytes = "1"
chrono = { version = "0.4", default-features = false, features = ["clock", "oldtime", "serde", "std", ] }
futures-util = "0.3"
hyper = { version = "1", features = ["full"] }
indexmap = { version = "2" }
libc = "0.2"
memchr = "2"
mime = "0.3"
nom = "7"
rand = "0.8"
regex = { version = "1" }
reqwest = { version = "0.12", default-features = false, features = ["charset", "gzip", "http2", "multipart", "json", "rustls-tls", "zstd"] }
aws-lc-rs = { version = "1" }
serde = { version = "1", features = ["derive"] }
serde_json = "1"
thiserror = "2"
tokio = { version = "1", features = ["full"] }
tracing = "0.1"
walkdir = "2"


# For macros
syn = { version = "2", default-features = false, features = ["derive", "extra-traits", "parsing", "proc-macro", "printing"] }
quote = "1"
proc-macro2 = "1"


[patch.crates-io]
async-trait = { path = "./async-trait" }
base64 = { path = "./base64" }
cfg-if = { path = "./cfg-if" }
constant_time_eq = { path = "./constant_time_eq" }
crc32fast = { path = "./crc32fast" }
form_urlencoded = { path = "./form_urlencoded" }
getopts = { path = "./getopts" }
hex = { path = "./hex" }
hostname = { path = "./hostname" }
httpdate = { path = "./httpdate" }
itoa = { path = "./itoa" }
memmem = { path = "./memmem" }
mime_guess = { path = "./mime_guess" }
num_cpus = { path = "./num_cpus" }
percent-encoding = { path = "./percent_encoding" }
pin-project-lite = { path = "./pin_project_lite" }
ryu = { path = "./ryu" }
serde_urlencoded = { path = "./serde_urlencoded" }
thiserror = { path = "./thiserror" }
thiserror-impl  = { path = "./thiserror/impl" }
uuid = { path = "./uuid" }
